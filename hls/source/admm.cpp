
#include "admm.hpp"
#include "utils.hpp"

data_t Rho = 62.9634;
/*
data_t R_inv[N_QP][N_QP] = { 0.0031,   -0.0, 0.0012,    0.0, 0.0004,    0.0, 0.0002,   -0.0,-0.0001,    0.0,-0.0001,   -0.0,   -0.0,   -0.0,
		   	   	   	   		   -0.0,  0.003,    0.0, 0.0011,    0.0, 0.0004,    0.0, 0.0002,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
							 0.0012,    0.0, 0.0035,    0.0, 0.0013,    0.0, 0.0005,    0.0,-0.0003,    0.0, 0.0001,-0.0001,    0.0,    0.0,
		   	   	   	   		    0.0, 0.0011,    0.0, 0.0035,    0.0, 0.0013,    0.0, 0.0005,    0.0,-0.0001,    0.0,    0.0,    0.0,    0.0,
							 0.0004,    0.0, 0.0013,    0.0, 0.0036,    0.0, 0.0014,    0.0,-0.0007,    0.0,    0.0,    0.0,-0.0001,    0.0,
		   	   	   	   		    0.0, 0.0004,    0.0, 0.0013,    0.0, 0.0035,    0.0, 0.0013,    0.0,-0.0003,    0.0,    0.0,    0.0,    0.0,
							 0.0002,    0.0, 0.0005,    0.0, 0.0014,    0.0, 0.0038,    0.0,-0.0018,    0.0,    0.0,    0.0, 0.0001,-0.0001,
		   	   	   	   		    0.0, 0.0002,    0.0, 0.0005,    0.0, 0.0013,    0.0, 0.0033,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
							-0.0001,    0.0,-0.0003,    0.0,-0.0007,    0.0,-0.0018,    0.0, 0.0049,    0.0,    0.0,    0.0,    0.0,-0.0001,
		   	   	   	   		    0.0,    0.0,    0.0,-0.0001,    0.0,-0.0003,    0.0,-0.0008,-0.0001, 0.0022,    0.0,    0.0,    0.0,    0.0,
							-0.0001,    0.0, 0.0001,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0, 0.0079,    0.0,    0.0,    0.0,
		   	   	   	   		    0.0,    0.0,-0.0001,    0.0, 0.0001,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0, 0.0079,    0.0,    0.0,
		   	   	   	   		    0.0,    0.0,    0.0,    0.0,-0.0001,    0.0, 0.0001,    0.0,    0.0,    0.0,    0.0,    0.0, 0.0079,    0.0,
		   	   	   	   		    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,-0.0001,    0.0,-0.0001,    0.0,    0.0,    0.0,    0.0, 0.0079};

*/

data_t R_inv[N_QP][N_QP] = {{ 3.0803e-03,-8.6322e-07, 1.1617e-03, 4.3977e-07, 4.4042e-04, 2.9486e-07, 1.7305e-04,-2.6384e-07,-8.4035e-05, 1.3520e-06,-7.0511e-05,-2.6505e-05,-9.8146e-06,-3.2397e-06},
         	 	 	 	 	{-8.6322e-07, 3.0221e-03,-7.1661e-07, 1.1491e-03,-5.8172e-07, 4.3430e-04,-7.6465e-07, 1.5726e-04, 1.6151e-06,-3.8731e-05,-3.1454e-08,-9.3781e-09,-1.3001e-08,-3.5802e-08},
 							{ 1.1617e-03,-7.1661e-07, 3.5225e-03,-1.0081e-06, 1.3354e-03, 9.0587e-09, 5.2472e-04,-1.1204e-06,-2.5481e-04, 4.1784e-06, 9.2005e-05,-8.0366e-05,-2.9759e-05,-9.8232e-06},
 							{ 4.3977e-07, 1.1491e-03,-1.0081e-06, 3.4564e-03,-1.3148e-06, 1.3063e-03,-2.1291e-06, 4.7303e-04, 4.7753e-06,-1.1650e-04,-1.0642e-08,-5.4387e-08,-4.8800e-08,-1.1089e-07},
 							{ 4.4042e-04,-5.8172e-07, 1.3354e-03,-1.3148e-06, 3.6067e-03,-2.4893e-06, 1.4172e-03,-3.9364e-06,-6.8820e-04, 1.1509e-05, 3.4881e-05, 8.8750e-05,-8.0374e-05,-2.6530e-05},
 							{ 2.9486e-07, 4.3430e-04, 9.0587e-09, 1.3063e-03,-2.4893e-06, 3.4951e-03,-5.2923e-06, 1.2656e-03, 1.2580e-05,-3.1169e-04, 6.1665e-09,-5.3781e-08,-1.5348e-07,-3.0425e-07},
 							{ 1.7305e-04,-7.6465e-07, 5.2472e-04,-2.1291e-06, 1.4172e-03,-5.2923e-06, 3.7702e-03,-1.2909e-05,-1.8309e-03, 3.1219e-05, 1.3706e-05, 3.4872e-05, 9.1979e-05,-7.0580e-05},
 							{-2.6384e-07, 1.5726e-04,-1.1204e-06, 4.7303e-04,-3.9364e-06, 1.2656e-03,-1.2909e-05, 3.3338e-03, 3.2637e-05,-8.2104e-04,-2.7118e-08,-9.4155e-08,-3.0922e-07,-8.2077e-07},
 							{-8.4035e-05, 1.6151e-06,-2.5481e-04, 4.7753e-06,-6.8820e-04, 1.2580e-05,-1.8309e-03, 3.2637e-05, 4.8606e-03,-8.4461e-05,-6.6555e-06,-1.6934e-05,-4.4667e-05,-1.1843e-04},
 							{ 1.3520e-06,-3.8731e-05, 4.1784e-06,-1.1650e-04, 1.1509e-05,-3.1169e-04, 3.1219e-05,-8.2104e-04,-8.4461e-05, 2.1579e-03, 1.0861e-07, 2.8254e-07, 7.6022e-07, 2.0545e-06},
 							{-7.0511e-05,-3.1454e-08, 9.2005e-05,-1.0642e-08, 3.4881e-05, 6.1665e-09, 1.3706e-05,-2.7118e-08,-6.6555e-06, 1.0861e-07, 7.9292e-03,-2.0991e-06,-7.7730e-07,-2.5658e-07},
 							{-2.6505e-05,-9.3781e-09,-8.0366e-05,-5.4387e-08, 8.8750e-05,-5.3781e-08, 3.4872e-05,-9.4155e-08,-1.6934e-05, 2.8254e-07,-2.0991e-06, 7.9295e-03,-1.9778e-06,-6.5283e-07},
 							{-9.8146e-06,-1.3001e-08,-2.9759e-05,-4.8800e-08,-8.0374e-05,-1.5348e-07, 9.1979e-05,-3.0922e-07,-4.4667e-05, 7.6022e-07,-7.7730e-07,-1.9778e-06, 7.9296e-03,-1.7219e-06},
 							{-3.2397e-06,-3.5802e-08,-9.8232e-06,-1.1089e-07,-2.6530e-05,-3.0425e-07,-7.0580e-05,-8.2077e-07,-1.1843e-04, 2.0545e-06,-2.5658e-07,-6.5283e-07,-1.7219e-06, 7.9303e-03}};

/*
data_t R_inv[N_QP][N_QP] =  {
0x1.93BC32p-9,	0x1.CF7020p-21,	0x1.30887Ep-10,	0x1.D83314p-22,	0x1.CDD110p-12,	0x1.3C99DEp-22,	0x1.6AEADAp-13,	0x1.1B4A92p-22,	0x1.6077AEp-14,	0x1.6AED0Ap-20,	0x1.27BE5Ap-14,	0x1.BCAC70p-16,	0x1.4952D4p-17,	0x1.B2D358p-19,
0x1.CF7020p-21,	0x1.8C1BC0p-9,	0x1.80B9F6p-21,	0x1.2D396Ep-10,	0x1.384E52p-21,	0x1.C764AEp-12,	0x1.9A84A8p-21,	0x1.49CC42p-13,	0x1.B19008p-20,	0x1.44E714p-15,	0x1.0E2FD0p-25,	0x1.423A64p-27,	0x1.BEB700p-27,	0x1.3389BAp-25,
0x1.30887Ep-10,	0x1.80B9F6p-21,	0x1.CDB1D2p-9,	0x1.0E9C36p-20,	0x1.5E12F8p-10,	0x1.374132p-27,	0x1.131AFAp-11,	0x1.2CC470p-20,	0x1.0B2FC6p-12,	0x1.18685Ap-18,	0x1.81E5A2p-14,	0x1.511422p-14,	0x1.F3472Ap-16,	0x1.499C72p-17,
0x1.D83314p-22,	0x1.2D396Ep-10,	0x1.0E9C36p-20,	0x1.C50858p-9,	0x1.60ED82p-20,	0x1.5672F8p-10,	0x1.1DC338p-19,	0x1.F0018Ap-12,	0x1.40766Cp-18,	0x1.E8A370p-14,	0x1.6DA4F0p-27,	0x1.D32F0Ep-25,	0x1.A3316Ap-25,	0x1.DC457Ap-24,
0x1.CDD110p-12,	0x1.384E52p-21,	0x1.5E12F8p-10,	0x1.60ED82p-20,	0x1.D8BE6Ep-9,	0x1.4E1CD0p-19,	0x1.738190p-10,	0x1.082A60p-18,	0x1.68D0F8p-11,	0x1.823004p-17,	0x1.2499FAp-15,	0x1.743EF4p-14,	0x1.511D56p-14,	0x1.BD1B46p-16,
0x1.3C99DEp-22,	0x1.C764AEp-12,	0x1.374132p-27,	0x1.5672F8p-10,	0x1.4E1CD0p-19,	0x1.CA1BF4p-9,	0x1.632998p-18,	0x1.4BC3A8p-10,	0x1.A61D02p-17,	0x1.46D548p-12,	0x1.A7C26Ep-28,	0x1.CDFABCp-25,	0x1.499880p-23,	0x1.46AFAEp-22,
0x1.6AEADAp-13,	0x1.9A84A8p-21,	0x1.131AFAp-11,	0x1.1DC338p-19,	0x1.738190p-10,	0x1.632998p-18,	0x1.EE2BEEp-9,	0x1.B124F2p-17,	0x1.DFF50Cp-10,	0x1.05E22Ap-15,	0x1.CBE182p-17,	0x1.248796p-15,	0x1.81C9EEp-14,	0x1.28089Cp-14,
0x1.1B4A92p-22,	0x1.49CC42p-13,	0x1.2CC470p-20,	0x1.F0018Ap-12,	0x1.082A60p-18,	0x1.4BC3A8p-10,	0x1.B124F2p-17,	0x1.B4F66Cp-9,	0x1.11C680p-15,	0x1.AE76BEp-11,	0x1.D1E3DAp-26,	0x1.9464EEp-24,	0x1.4C0670p-22,	0x1.B8A634p-21,
0x1.6077AEp-14,	0x1.B19008p-20,	0x1.0B2FC6p-12,	0x1.40766Cp-18,	0x1.68D0F8p-11,	0x1.A61D02p-17,	0x1.DFF50Cp-10,	0x1.11C680p-15,	0x1.3E8B1Ep-8,	0x1.6240E4p-14,	0x1.BEA470p-18,	0x1.1C1CA8p-16,	0x1.76B10Ap-15,	0x1.F0C054p-14,
0x1.6AED0Ap-20,	0x1.44E714p-15,	0x1.18685Ap-18,	0x1.E8A370p-14,	0x1.823004p-17,	0x1.46D548p-12,	0x1.05E22Ap-15,	0x1.AE76BEp-11,	0x1.6240E4p-14,	0x1.1AD884p-9,	0x1.D27934p-24,	0x1.2F5FE4p-22,	0x1.9823B8p-21,	0x1.13BF04p-19,
0x1.27BE5Ap-14,	0x1.0E2FD0p-25,	0x1.81E5A2p-14,	0x1.6DA4F0p-27,	0x1.2499FAp-15,	0x1.A7C26Ep-28,	0x1.CBE182p-17,	0x1.D1E3DAp-26,	0x1.BEA470p-18,	0x1.D27934p-24,	0x1.03D33Cp-7,	0x1.19BD58p-19,	0x1.A14F72p-21,	0x1.137FA0p-22,
0x1.BCAC70p-16,	0x1.423A64p-27,	0x1.511422p-14,	0x1.D32F0Ep-25,	0x1.743EF4p-14,	0x1.CDFABCp-25,	0x1.248796p-15,	0x1.9464EEp-24,	0x1.1C1CA8p-16,	0x1.2F5FE4p-22,	0x1.19BD58p-19,	0x1.03D548p-7,	0x1.097308p-19,	0x1.5E7BF6p-21,
0x1.4952D4p-17,	0x1.BEB700p-27,	0x1.F3472Ap-16,	0x1.A3316Ap-25,	0x1.511D56p-14,	0x1.499880p-23,	0x1.81C9EEp-14,	0x1.4C0670p-22,	0x1.76B10Ap-15,	0x1.9823B8p-21,	0x1.A14F72p-21,	0x1.097308p-19,	0x1.03D652p-7,	0x1.CE36D8p-20,
0x1.B2D358p-19,	0x1.3389BAp-25,	0x1.499C72p-17,	0x1.DC457Ap-24,	0x1.BD1B46p-16,	0x1.46AFAEp-22,	0x1.28089Cp-14,	0x1.B8A634p-21,	0x1.F0C054p-14,	0x1.13BF04p-19,	0x1.137FA0p-22,	0x1.5E7BF6p-21,	0x1.CE36D8p-20,	0x1.03DBC8p-7,
};

*/

data_t RhoMt_neg[N_QP][M_QP] = {-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,-61.23,-0.062,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 61.23, 0.062,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
								   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,-62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
								   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,-61.23,-0.062,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 61.23, 0.062,   0.0,   0.0,   0.0,   0.0,
								   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,-62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,-61.23,-0.062,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 61.23, 0.062,   0.0,   0.0,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,-62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,-61.23,-0.062,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 61.23, 0.062,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,-62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,   0.0,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 62.96,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-2.427,-0.001,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 2.427, 0.001,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-2.427,-0.001,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 2.427, 0.001,   0.0,   0.0,   0.0,   0.0,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-2.427,-0.001,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 2.427, 0.001,   0.0,   0.0,
								   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-62.96, 62.96,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,-2.427,-0.001,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 2.427, 0.001};

data_t tk_admm[N_QP] = {0};
data_t zk_admm[M_QP] = {0};
data_t uk_admm[M_QP] = {0};

void qp_admm(data_t (&c_qp)[M_QP]){
	loop_admm: for(int i = 0; i < N_IT; i++){
// #pragma HLS UNROLL factor=2
	        tk_update(c_qp, tk_admm, zk_admm, uk_admm);
	        //zk_update(c_qp, tk_admm, zk_admm, uk_admm);
	        //uk_update(c_qp, tk_admm, zk_admm, uk_admm);
	        zk_uk_update(c_qp, tk_admm, zk_admm, uk_admm);
	    }
	return;
}


void tk_update(data_t (&c_qp)[M_QP], data_t (&tk)[N_QP], data_t (&zk)[M_QP], data_t (&uk)[M_QP]){
	data_t vx[M_QP];
	data_t temp[M_QP];
	// vx = zk - c + uk;
	tk_update_merge1:{
		vsub<M_QP,data_t>(zk, c_qp, temp);
		vadd<M_QP,data_t>(temp, uk, vx);
	}
    // tk = R_inv * (-rho * M^T * vx - h);
    data_t temp1[N_QP], temp2[N_QP], temp3[N_QP];
    tk_update_merge2:{
    	mvmult<N_QP,M_QP,data_t>(RhoMt_neg, vx, temp1);
    	vsub<N_QP,data_t>(temp1, h_qp, temp2);
    }
    mvmult<N_QP,N_QP,data_t>(R_inv, temp2, tk);
    return;
}

void zk_uk_update (data_t (&c_qp)[M_QP], data_t (&tk)[N_QP], data_t (&zk)[M_QP], data_t (&uk)[M_QP]){
//#pragma HLS ARRAY_PARTITION variable=tk type=complete
	data_t Ctk[M_QP], temp[M_QP], temp1[M_QP], temp2[M_QP], temp3[M_QP];
	zk_uk_update_merge:{
    //  zk = max{0, c - uk - C*tk};
    // uk = uk + (C*tk + zk - c);
	mvmult<M_QP,N_QP,data_t>(C_qp, tk, Ctk);	// Ctk = C*kt
	vsub<M_QP,data_t>(c_qp, uk, temp);			// temp = c - uk
	vsub<M_QP,data_t>(temp, Ctk, temp1);		// temp1 = (c - uk) - Ctk
	vadd<M_QP,data_t>(uk, Ctk, temp2);			// temp2 = uk + Ctk
	max0<M_QP,data_t>(temp1, zk);				// zk
	vsub<M_QP,data_t>(temp2, c_qp, temp3);		// temp3 = (uk + Ctk) - c
	vadd<M_QP,data_t>(temp3, zk, uk);			// uk = ((uk + Ctk) - c) + zk
	}
	return;
}

void zk_update(data_t (&c_qp)[M_QP], data_t (&tk)[N_QP], data_t (&zk)[M_QP], data_t (&uk)[M_QP]){
	data_t temp[M_QP], temp1[M_QP], temp2[M_QP];
    {
//#pragma HLS LOOP_MERGE
    //  zk = max{0, c - uk - M*tk};
	vsub<M_QP,data_t>(c_qp, uk, temp);
	mvmult<M_QP,N_QP,data_t>(C_qp, tk, temp1);
	vsub<M_QP,data_t>(temp, temp1, temp2);
	max0<M_QP,data_t>(temp2, zk);
    }
	return;
}

void uk_update(data_t (&c_qp)[M_QP], data_t (&tk)[N_QP], data_t (&zk)[M_QP], data_t (&uk)[M_QP]){
	data_t temp[M_QP], temp1[M_QP], temp2[M_QP];
    {
//#pragma HLS LOOP_MERGE
    // uk = uk + (M*tk + zk - c);
	vsub<M_QP,data_t>(zk, c_qp, temp);
	vadd<M_QP,data_t>(uk, temp, temp1);
	mvmult<M_QP,N_QP,data_t>(C_qp, tk, temp2);
	vadd<M_QP,data_t>(temp1, temp2, uk);
    }
	return;
}

